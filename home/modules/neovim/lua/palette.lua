local colors = {
  strong_blue = "#37a5ff",
  strong_green = "#82f231",
  strong_red = "#ff3343",
  strong_yellow = "#ffbf47",
  dark_red = "#c6535c",
  red = "#e06c75",
  light_red = "#f28d94",
  dark_green = "#80a168",
  green = "#98c379",
  light_green = "#b1dd91",
  dark_orange = "#b28152",
  orange = "#d19a66",
  light_orange = "#e8b482",
  dark_yellow = "#cda760",
  yellow = "#e5c07b",
  light_yellow = "#f5d79e",
  dark_blue = "#4496d9",
  blue = "#61afef",
  light_blue = "#86c7fd",
  dark_magenta = "#ac60c2",
  magenta = "#c678dd",
  light_magenta = "#dc98f0",
  dark_cyan = "#4e8f97",
  cyan = "#56b6c2",
  light_cyan = "#6ed1dd",
  dark_black = "#0e1013",
  black = "#15171c",
  light_black = "#1c1e25",
  grey1 = "#24262c",
  grey2 = "#33363c",
  grey3 = "#41454c",
  grey4 = "#50545c",
  grey5 = "#5f646c",
  grey6 = "#6e737d",
  grey7 = "#7d828d",
  grey8 = "#8c919d",
  grey9 = "#9aa1ad",
  white = "#abb2bf",
}

local syntax = {
  statement = colors.orange,
  ["function"] = colors.blue,
  variable = colors.white,
  include = colors.magenta,
  keyword = colors.magenta,
  struct = colors.red,
  string = colors.green,
  identifier = colors.red,
  field = colors.cyan,
  parameter = colors.red,
  property = colors.orange,
  punctuation = colors.white,
  constructor = colors.cyan,
  operator = colors.grey8,
  preproc = colors.cyan,
  constant = colors.orange,
  tag = colors.red,
  todo_fg = colors.cyan,
  todo_bg = colors.grey2,
  number = colors.orange,
  comment = colors.grey4,
  type = colors.yellow,
  conditional = colors.red,
}

local colorscheme = {
  red = colors.dark_red,
  yellow = colors.yellow,
  orange = colors.dark_yellow,
  magenta = colors.magenta,
  blue = colors.blue,
  green = colors.green,
  cyan = colors.cyan,

  directory = colors.blue,
  fg = colors.white,
  diff = {
    add = colors.dark_green,
    remove = colors.dark_red,
    text = colors.dark_blue,
    change = colors.dark_yellow,
  },
  accent = colors.cyan,
  search_result = { fg = colors.dark_black, bg = colors.blue, telescope = colors.blue },
  match = colors.grey9,
  dimmed = { bg = colors.grey4, fg = colors.grey4 },
  bg = {
    base = colors.black,
    alt = colors.light_black,
    selected = colors.grey2,
  },
  border = colors.white,
  syntax = syntax,
  built_in = syntax,
  diagnostic = {
    error = colors.light_red,
    warn = colors.strong_yellow,
    info = colors.cyan,
    hint = colors.magenta,
  },
  inc_search = { fg = colors.dark_black, bg = colors.blue },
  uri = colors.dark_yellow,
  pum = {
    fg = colors.grey9,
    bg = colors.dark_black,
    sbar = colors.light_black,
    thumb = colors.blue,
    sel = { bg = colors.grey2, fg = colors.white },
  },
  heading = {
    h1 = colors.blue,
    h2 = colors.blue,
  },
  remaps = {

    base = {
      WinSeparator = { fg = colors.grey2, bg = colors.black },
      DiffAdd = { fg = colors.black, bg = colors.dark_green },
      DiffChange = { fg = colors.black, bg = colors.dark_yellow },
      DiffDelete = { fg = colors.black, bg = colors.dark_red },
      DiffText = { bg = colors.grey1 },
      ["@lsp.type.class"] = { fg = syntax.type },
      ["@lsp.type.decorator"] = { fg = syntax["function"] },
      ["@lsp.type.enum"] = { fg = syntax.type },
      ["@lsp.type.enumMember"] = { fg = syntax.constant },
      ["@lsp.type.function"] = { fg = syntax["function"] },
      ["@lsp.type.interface"] = { fg = syntax.type },
      ["@lsp.type.macro"] = { fg = syntax["function"] },
      ["@lsp.type.method"] = { fg = syntax["function"] },
      ["@lsp.type.namespace"] = { fg = syntax.identifier },
      ["@lsp.type.parameter"] = { fg = syntax.parameter },
      ["@lsp.type.property"] = { fg = syntax.property },
      ["@lsp.type.struct"] = { fg = syntax.type },
      ["@lsp.type.type"] = { fg = syntax.type },
      ["@lsp.type.typeParamater"] = { fg = syntax.type },
      ["@lsp.type.variable"] = { fg = syntax.variable },
    },
    plugins = {
      microscope = {
        MicroscopeMatch = { fg = colors.black, bg = colors.blue },
        MicroscopeColor1 = { fg = colors.red },
        MicroscopeColor2 = { fg = colors.green },
      },
    },
  },
}

return {
  syntax = syntax,
  colors = colors,
  colorscheme = colorscheme,
}
